package com.company.MeredithVanVelsorU1M5Summative.dao;

import com.company.MeredithVanVelsorU1M5Summative.dto.Author;
import com.company.MeredithVanVelsorU1M5Summative.dto.Book;
import com.company.MeredithVanVelsorU1M5Summative.dto.Publisher;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.time.LocalDate;
import java.util.List;

import static org.junit.Assert.*;
// this is an integration test not a jUnit test because
// it has a database
// AAA pattern is used (Arrange, Act, Assert)
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class BookDaoJdbctemplateImplTest {
    // needs to be accessible to other pieces in this package
    // dependency injection: we do not instantiate bc we want
    // Spring (our container?) to do it
    // must add annotation 'autowired' to tell Spring to do this
    @Autowired
    protected AuthorDao authorDao;
    @Autowired
    protected PublisherDao publisherDao;
    @Autowired
    protected BookDao bookDao;

    @Before
    public void setUp() throws Exception {
        // Clean up the test db
        bookDao.getAllBooks().stream().forEach(book -> bookDao.deleteBook(book.getBookId()));
        publisherDao.getAllPublishers().stream().forEach(publisher -> publisherDao.deletePublisher(publisher.getPublisherId()));
        authorDao.getAllAuthors().stream().forEach(author -> authorDao.deleteAuthor(author.getAuthorId()));
    }

    @Test   // jUnit annotation that tells jUnit and Spring that this is a test
    public void addGetDeleteBook() {
        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");
        authorDao.addAuthor(author);

        Publisher publisher = new Publisher();
        publisher.setName("Magical Publishers");
        publisher.setStreet("404 Typo Circle");
        publisher.setCity("Charlotte");
        publisher.setState("NC");
        publisher.setPostalCode("28207");
        publisher.setPhone("704-820-2916");
        publisher.setEmail("hello@magicalpublishers.com");
        publisherDao.addPublisher(publisher);

        Book book = new Book();
        book.setAuthorId(author.getAuthorId());
        book.setPublisherId(publisher.getPublisherId());
        book.setIsbn("12345");
        book.setPublishDate(LocalDate.of(1984, 5, 8));
        book.setTitle("Fahrenheit 451");
        book.setPrice(18.99f);
        bookDao.addBook(book);

        // ids for all will be generated when added to DB
        // foreign keys must be added before primary keys
        // will go retrieve the publisher added to
        // bring back this variable with autogenerated id
        Book book1 =  bookDao.getBook(book.getBookId());

        // this tests that the getBook method is working
        assertEquals(book, book1);

        // this deletes the one we just made with id
        bookDao.deleteBook(book.getBookId());

        // this assigns book to book1
        book1 = bookDao
                .getBook(book.getBookId());

        // this tests that the book1 was deleted properly
        assertNull(book1);
    }

    @Test
    public void getAllBooks() {
        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");
        authorDao.addAuthor(author);

        Publisher publisher = new Publisher();
        publisher.setName("Magical Publishers");
        publisher.setStreet("404 Typo Circle");
        publisher.setCity("Charlotte");
        publisher.setState("NC");
        publisher.setPostalCode("28207");
        publisher.setPhone("704-820-2916");
        publisher.setEmail("hello@magicalpublishers.com");
        publisherDao.addPublisher(publisher);

        Book book = new Book();
        book.setAuthorId(author.getAuthorId());
        book.setPublisherId(publisher.getPublisherId());
        book.setIsbn("12345678");
        book.setPublishDate(LocalDate.of(1984, 5, 8));
        book.setTitle("Fahrenheit 451");
        book.setPrice(18.99f);
        bookDao.addBook(book);

        // book are overwritten but they are already written to db
        author = new Author();
        author.setFirstName("J.K.");
        author.setLastName("Rowling");
        author.setStreet("2987 Snitch Circle");
        author.setCity("Seattle");
        author.setState("WA");
        author.setPostalCode("45678");
        author.setPhone("409-345-7654");
        author.setEmail("jkrowling@gmail.com");
        authorDao.addAuthor(author);

        publisher = new Publisher();
        publisher.setName("Nemo Publications");
        publisher.setStreet("4230 Wallaby Lany");
        publisher.setCity("Monterray Bay");
        publisher.setState("CA");
        publisher.setPostalCode("47890");
        publisher.setPhone("842-378-3267");
        publisher.setEmail("hello@nemopublications.com");
        publisherDao.addPublisher(publisher);

        book = new Book();
        book.setAuthorId(author.getAuthorId());
        book.setPublisherId(publisher.getPublisherId());
        book.setIsbn("123456");
        book.setPublishDate(LocalDate.of(1999, 3, 4));
        book.setTitle("Harry Potter and the Goblet of Fire");
        book.setPrice(21.99f);
        bookDao.addBook(book);

        // populates new list with all books in DB
        List<Book> bookList = bookDao.getAllBooks();

        // tests the expected value to the number of books
        // added to the list
        assertEquals(2, bookList.size());
    }

    @Test
    public void updateBook(){
        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");
        authorDao.addAuthor(author);

        Publisher publisher = new Publisher();
        publisher.setName("Magical Publishers");
        publisher.setStreet("404 Typo Circle");
        publisher.setCity("Charlotte");
        publisher.setState("NC");
        publisher.setPostalCode("28207");
        publisher.setPhone("704-820-2916");
        publisher.setEmail("hello@magicalpublishers.com");
        publisherDao.addPublisher(publisher);

        Book book = new Book();
        book.setAuthorId(author.getAuthorId());
        book.setPublisherId(publisher.getPublisherId());
        book.setIsbn("234567");
        book.setPublishDate(LocalDate.of(1984, 5, 8));
        book.setTitle("Fahrenheit 451");
        book.setPrice(18.99f);
        bookDao.addBook(book);

        book.setTitle("Animal Farm");
        book.setPrice(19.99f);

        // updates same book with new information
        bookDao.updateBook(book);

        // retrieves book with autoincremented id that was
        // assign in the first place
        // along with the NEW updated information from publisher1
        Book book1 = bookDao.getBook(book.getBookId());

        // this tests that publisher was updated correctly to publisher1
        assertEquals(book, book1);
    }

    @Test
    public void getBooksByAuthor(){

        Author author1 = new Author();
        author1.setFirstName("J.K.");
        author1.setLastName("Rowling");
        author1.setStreet("2987 Snitch Circle");
        author1.setCity("Seattle");
        author1.setState("WA");
        author1.setPostalCode("45678");
        author1.setPhone("409-345-7654");
        author1.setEmail("jkrowling@gmail.com");
        authorDao.addAuthor(author1);

        Publisher publisher1 = new Publisher();
        publisher1.setName("Nemo Publications");
        publisher1.setStreet("4230 Wallaby Lany");
        publisher1.setCity("Monterray Bay");
        publisher1.setState("CA");
        publisher1.setPostalCode("47890");
        publisher1.setPhone("842-378-3267");
        publisher1.setEmail("hello@nemopublications.com");
        publisherDao.addPublisher(publisher1);

        Book book1 = new Book();
        book1.setAuthorId(author1.getAuthorId());
        book1.setPublisherId(publisher1.getPublisherId());
        book1.setIsbn("123455678");
        book1.setPublishDate(LocalDate.of(1999, 3, 4));
        book1.setTitle("Harry Potter and the Goblet of Fire");
        book1.setPrice(21.99f);
        bookDao.addBook(book1);

        Book book2 = new Book();
        book2.setAuthorId(author1.getAuthorId());
        book2.setPublisherId(publisher1.getPublisherId());
        book2.setIsbn("1234567678");
        book2.setPublishDate(LocalDate.of(1999, 3, 4));
        book2.setTitle("Harry Potter and the Chamber of Secrets");
        book2.setPrice(21.99f);
        bookDao.addBook(book2);

        Book book3 = new Book();
        book3.setAuthorId(author1.getAuthorId());
        book3.setPublisherId(publisher1.getPublisherId());
        book3.setIsbn("123456789");
        book3.setPublishDate(LocalDate.of(1999, 3, 4));
        book3.setTitle("Harry Potter and the Prisoner of Azkaban");
        book3.setPrice(20.99f);
        bookDao.addBook(book3);

        List<Book> bookByAuthorList = bookDao.getBooksByAuthor(author1.getAuthorId());
        assertEquals(bookByAuthorList.size(), 3);
    }
}