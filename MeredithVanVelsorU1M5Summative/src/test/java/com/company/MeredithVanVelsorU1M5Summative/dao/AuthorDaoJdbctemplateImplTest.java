package com.company.MeredithVanVelsorU1M5Summative.dao;

import com.company.MeredithVanVelsorU1M5Summative.dto.Author;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import static org.junit.Assert.*;
import java.util.List;

// this is an integration test not a jUnit test because
// it has a database
// AAA pattern is used (Arrange, Act, Assert)
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class AuthorDaoJdbctemplateImplTest {

    // needs to be accessible to other pieces in this package
    // dependency injection: we do not instantiate bc we want
    // Spring to do it
    // must add annotation 'autowired' to tell Spring to do this
    @Autowired
    protected AuthorDao authorDao;
    @Autowired
    protected PublisherDao publisherDao;
    @Autowired
    protected BookDao bookDao;

    // 'before' annotation tells spring to run this before each
    // of the other test methods are run.
    // 'good state' empty DAO so this will delete all motorcycles
    // out of the database

    @Before // need to clean out the test db
    public void setUp() throws Exception {
        // Clean up the test db

        bookDao.getAllBooks().stream().forEach(book -> bookDao.deleteBook(book.getBookId()));
        authorDao.getAllAuthors().stream().forEach(author -> authorDao.deleteAuthor(author.getAuthorId()));


    }

    @Test   // jUnit annotation that tells jUnit and Spring that this is a test
    public void addGetDeleteAuthor() {
        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");

        // id will be generated when added to DB
        author = authorDao.addAuthor(author);

        // will go retrieve the author added to
        // bring back this variable with autogenerated id
        Author author1 = authorDao.getAuthor(author.getAuthorId());

        // this tests that the getAuthor method is working
        // correctly and everything is working
        assertEquals(author, author1);

        // this deletes the one we just made with id
        authorDao.deleteAuthor(author.getAuthorId());

        // this assigns author to author1 again??
        author1 = authorDao
                .getAuthor(author.getAuthorId());

        // this tests that the author1 was deleted properly
        assertNull(author1);
    }

	@Test
    public void getAllAuthors() {
        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");

        authorDao.addAuthor(author);

        // author is overwritten but is already written to db
        author = new Author();
        author.setFirstName("J.K.");
        author.setLastName("Rowling");
        author.setStreet("Harry Potter and the Goblet of Fire");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-654-2288");
        author.setEmail("jkrowling@gmail.com");

        authorDao.addAuthor(author);

        // populates new list with all motorcycles in DB
        List<Author> authorList = authorDao.getAllAuthors();

        // tests the expected value to the number of motorcycles
        // added to the list
        assertEquals(2, authorList.size());
    }

    @Test
    public void updateAuthor(){

        Author author = new Author();
        author.setFirstName("Ray");
        author.setLastName("Bradbury");
        author.setStreet("451 Firefighter Lane");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-777-4510");
        author.setEmail("raybradbury@gmail.com");

        // adds new author to the DB
        authorDao.addAuthor(author);

        author.setFirstName("J.K.");
        author.setLastName("Rowling");
        author.setStreet("Harry Potter and the Goblet of Fire");
        author.setCity("Charlotte");
        author.setState("NC");
        author.setPostalCode("28207");
        author.setPhone("704-654-2288");
        author.setEmail("jkrowling@gmail.com");

        // updates same author with new information
        authorDao.updateAuthor(author);

        // retrieves author with autoincremented id that was
        // assign in the first place
        // along with the NEW updated information from author1
        Author author1 = authorDao.getAuthor(author.getAuthorId());

        // this tests that author was updated correctly to author1
        assertEquals(author1, author);
    }

}
